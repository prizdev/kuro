var path = require('path');
var pg = require('pg');
var os = require('os');
var upload_to = require('server_upload');
var conString = "postgres://ubuntu:KuroB192@localhost/kuro_db";

var blender_renderer = function() {
	pg.connect(conString, function(err, client, done) {
		client.query('SELECT * FROM jobs ORDER BY taskname ASC LIMIT(1)', function(err, results) {
			client.query("UPDATE tasks SET status = 'rendering' WHERE name = $1", [results.rows[0].taskname], function(err) {
				client.query('SELECT * FROM tasks WHERE name = $1', [results.rows[0].taskname], function(err, results) {
					var row = results.rows[0];
					var spawn = require('child_process').spawn;
					//var grep = spawn('grep', '"Saved\|Finished script!"');
					/*var child = spawn('blender', [
						'-b',
						'-P', path.join(process.cwd(), 'routes/api/v1/main.py'),
						'-t', row.name,
						'-nogl', row.nogl,
						'-gif', row.gif
					]);*/

					//child.stdout.pipe(grep.stdin);
					console.log('Starting script...');
					//child.stdout.on('data', function(chunk) {
					var child = require('child_process').exec('blender -b -P ~/routes/api/v1/main.py -t 88 -nogl 1024 -gif 128 | grep "Finished script!"', function(error, stdout, stderr) {
						//process.stdout.write(chunk.toString('utf-8'));
						//if(/Finished script!/.test(chunk.toString('utf-8'))) {
							console.log('Finished Script!');
							upload_to.ftp({host:row.host,user:row.uname,pass:row.pass},path.join(process.cwd(),'/assets/'+row.name+'/output/spritesheet'+row.name+'.jpg'),'/prizmiq/core/'+row.user_id+'/'+model_id+'/nogl/spritesheet'+row.name+'.jpg',true,function(){
								client.query('DELETE FROM jobs WHERE taskname = $1', [row.name], function(err, results) {
									if(err) {error(err);done();}
									else client.query("UPDATE tasks SET status = 'complete', host = '', uname = '', pass = ''", function(err, results) {
										if(err) {error(err);done();}
										else client.query('SELECT count(*) FROM jobs' , function(err, count_results) {
											if(err) {error(err);done();}
											else if(parseInt(count_results.rows[0].count) > 0) {
												done();
												blender_renderer();
											}
											else {
												done();
											}
										});
									});
								});
							});
						//}
					});
				});
			});
		});
	});
};

function error(err, res) {
	if(res) {
		res.send({
			success: false,
			data: err
		});
	}
	else {
		console.log(err);
	}
}

module.exports = (function(){
	return blender_renderer;
}(this));
