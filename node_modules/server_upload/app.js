module.exports = (function(){
	var fs = require('fs');
	var Client = require('ftp');
	var aws = require('aws-sdk');
	var recurseFilePath = function(client, remote_path, local_file, unlink, callback) {
		if(remote_path.length>0) {
			client.mkdir(remote_path[0], true, function(err) {
				if(err) {
					callback('mkdir failed.');
				}
				client.cwd(remote_path[0], function() {
					remote_path.shift();
					recurseFilePath(client, remote_path, local_file, unlink);
				});
			});
		}
		else {
			client.put(local_file, cleanArray(local_file.split('/')).pop(), function(err) {
				if(err) {
					callback('mkdir failed.');
				}
				client.end();
				if(unlink) {
					fs.unlink(local_file, function (err){
						callback('mkdir failed.');
					});
				}
				callback(null);
			});
		}
	};
	var cleanArray = function(actual){
	  var newArray = [];
	  for(var i = 0; i<actual.length; i++){
	      if (actual[i]){
	        newArray.push(actual[i]);
	    }
	  }
	  return newArray;
  };
	return {
		ftp : function(ftp_params, local_file, remote_path, unlink, callback) {
			var c = new Client();
			c.on('ready', function() {
				var dirpath = remote_path.split('/');
				recurseFilePath(c, cleanArray(dirpath), local_file, unlink);
			});
			c.connect(ftp_params);
			return module.exports;
		},
		s3 : function(aws_params, bucket_name, local_file, remote_path, unlink) {
			aws.config.update(aws_params);
		    var s3 = new aws.S3({params: {Bucket: bucket_name}});
			var fileBuffer = fs.readFileSync(local_file);
			var metaData = require('mime').lookup(local_file);
			s3.putObject({
				ACL: 'public-read',
				Bucket: bucket_name,
				Key: cleanArray(remote_path.split('/')).join('/') + '/' + cleanArray(local_file.split('/')).pop(),
				Body: fileBuffer,
				ContentType: metaData
			}, function(error, response){
				if(unlink) {
					fs.unlink(local_file, function (err){});
				}
			});
			return module.exports;
		}
	};
}(this));
